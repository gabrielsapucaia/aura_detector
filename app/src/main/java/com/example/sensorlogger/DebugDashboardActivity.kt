package com.example.sensorlogger

import android.graphics.Color
import android.os.Bundle
import android.text.SpannableStringBuilder
import android.text.Spanned
import android.text.style.ForegroundColorSpan
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import com.example.sensorlogger.model.TelemetryUiState
import com.example.sensorlogger.repository.TelemetryStateStore
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.launch
import timber.log.Timber
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
import kotlin.math.abs

class DebugDashboardActivity : AppCompatActivity() {

    private lateinit var debugFullContent: TextView
    private val dateFormat = SimpleDateFormat("HH:mm:ss", Locale.getDefault())

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_debug_dashboard)
        
        debugFullContent = findViewById(R.id.debug_full_content)
        observeTelemetryState()
    }
    
    private fun observeTelemetryState() {
        lifecycleScope.launch {
            TelemetryStateStore.state.collectLatest { state ->
                updateUI(state)
            }
        }
    }
    
    private fun updateUI(state: TelemetryUiState) {
        try {
            val content = buildFullDiagnosticContent(state)
            debugFullContent.text = content
        } catch (e: Exception) {
            Timber.e(e, "Error updating debug dashboard")
            debugFullContent.text = "ERRO ao atualizar dashboard: ${e.message}"
        }
    }
    
    private fun buildFullDiagnosticContent(state: TelemetryUiState): String {
        val sb = StringBuilder()
        val p = state.lastPayload
        
        sb.append(buildCard1IdentificationSession(state, p))
        sb.append("\n")
        sb.append(buildCard2PositionMovementGnss(state, p))
        sb.append("\n")
        sb.append(buildCard3GnssQuality(state, p))
        sb.append("\n")
        sb.append(buildCard4VehicleDynamics(state, p))
        sb.append("\n")
        sb.append(buildCard5ImuHealth(state, p))
        sb.append("\n")
        sb.append(buildCard6AccelerationRaw(state, p))
        sb.append("\n")
        sb.append(buildCard7AccelerationLinear(state, p))
        sb.append("\n")
        sb.append(buildCard8Gyro(state, p))
        sb.append("\n")
        sb.append(buildCard9Magnetometer(state, p))
        sb.append("\n")
        sb.append(buildCard10Barometer(state, p))
        sb.append("\n")
        sb.append(buildCard11NetworkUpload(state, p))
        sb.append("\n")
        sb.append(buildCard12GnssRaw(state, p))
        sb.append("\n\n")
        
        // Timestamp de atualizaÃ§Ã£o
        val timestamp = dateFormat.format(Date())
        sb.append("â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n")
        sb.append("Atualizado: $timestamp")
        
        return sb.toString()
    }
    
    private fun fmt(value: Any?): String {
        return when (value) {
            null -> "null"
            is Float -> if (value.isNaN() || value.isInfinite()) "N/A" else "%.3f".format(value)
            is Double -> if (value.isNaN() || value.isInfinite()) "N/A" else "%.3f".format(value)
            else -> value.toString()
        }
    }
    
    private fun buildCard1IdentificationSession(state: TelemetryUiState, p: com.example.sensorlogger.model.TelemetryPayloadV11?): String {
        val sb = StringBuilder()
        sb.append("ðŸŸ§ CARD 1 Â· IdentificaÃ§Ã£o e SessÃ£o\n")
        sb.append("â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n")
        
        val seqId = p?.sequenceId?.toString() ?: "N/A"
        val deviceId = p?.deviceId ?: "N/A"
        val operatorId = p?.operatorId ?: "N/A"
        val equipmentTag = p?.equipmentTag ?: "null"
        
        sb.append("NÃºmero da sequÃªncia: $seqId | Dispositivo: $deviceId | Operador: $operatorId ðŸŸ¢ | Equipamento: $equipmentTag\n")
        
        val schemaVersion = p?.schemaVersion ?: "N/A"
        val tsEpoch = p?.timestampEpoch?.toString() ?: "N/A"
        val gnssProvider = p?.provider ?: "null"
        val gnssFix = p?.gnssFix ?: "null"
        
        sb.append("VersÃ£o do schema: $schemaVersion ðŸŸ¢ | Tempo (epoch ms): $tsEpoch | Provedor GNSS: $gnssProvider | Tipo de fix: $gnssFix\n")
        
        val imuSamples = p?.imuSamples?.toString() ?: "N/A"
        val imuFps = p?.imuFpsEffective?.let { "%.1f".format(it) } ?: "N/A"
        val gnssRealtimeNanos = p?.gnssElapsedRealtimeNanos?.toString() ?: "null"
        
        sb.append("Amostras IMU: $imuSamples | Taxa IMU: $imuFps Hz ðŸŸ£ Alta | Tempo GNSS (realtime nanos): $gnssRealtimeNanos\n")
        
        val gnssRawSupported = p?.gnssRawSupported?.toString() ?: "null"
        val totalRaw = p?.gnssRawCount?.toString() ?: "0"
        val gpsUsed = p?.gpsUsed?.toString() ?: "0"
        val galileoUsed = p?.galileoUsed?.toString() ?: "0"
        val glonassUsed = p?.glonassUsed?.toString() ?: "0"
        val beidouUsed = p?.beidouUsed?.toString() ?: "0"
        val qzssUsed = p?.qzssUsed?.toString() ?: "0"
        val sbasUsed = p?.sbasUsed?.toString() ?: "0"
        
        sb.append("GNSS raw suportado: $gnssRawSupported | Total raw: $totalRaw | ")
        sb.append("GPS: $gpsUsed | Galileo: $galileoUsed | GLONASS: $glonassUsed | BeiDou: $beidouUsed | QZSS: $qzssUsed | SBAS: $sbasUsed")
        
        return sb.toString()
    }
    
    private fun buildCard2PositionMovementGnss(state: TelemetryUiState, p: com.example.sensorlogger.model.TelemetryPayloadV11?): String {
        val sb = StringBuilder()
        sb.append("ðŸŸ© CARD 2 Â· PosiÃ§Ã£o e Movimento GNSS\n")
        sb.append("â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n")
        
        val lat = p?.latitude?.let { "%.6f".format(it) } ?: "null"
        val lon = p?.longitude?.let { "%.6f".format(it) } ?: "null"
        val altGnss = p?.altitude?.let { "%.1f".format(it) } ?: "null"
        val altBaro = p?.baroAltitudeMeters?.let { "%.1f".format(it) } ?: "null"
        
        sb.append("Latitude: $lat | Longitude: $lon | Altitude GNSS: $altGnss m | Altitude baromÃ©trica: $altBaro\n")
        
        val course = p?.course?.let { "%.1f".format(it) } ?: "null"
        val speedMs = p?.speed ?: 0f
        val speedKmh = speedMs * 3.6f
        val hasL5 = p?.hasL5?.toString() ?: "null"
        val motionEmoji = if (speedKmh < 0.5f) "ðŸŸ¦ Parado" else ""
        
        sb.append("Rumo (heading): $courseÂ° | Velocidade: %.2f m/s (%.1f km/h) $motionEmoji | Possui L5: $hasL5 âšª\n".format(speedMs, speedKmh))
        
        val accH = p?.accuracyMeters?.let { "%.1f".format(it) } ?: "null"
        val accV = p?.verticalAccuracyMeters?.let { "%.1f".format(it) } ?: "null"
        val accSpeed = p?.speedAccuracyMps?.let { "%.2f".format(it) } ?: "null"
        
        sb.append("PrecisÃ£o horizontal: $accH m | PrecisÃ£o vertical: $accV m | PrecisÃ£o da velocidade: $accSpeed m/s\n")
        
        val hdop = p?.hdop?.let { "%.2f".format(it) } ?: "null"
        val pdop = p?.pdop?.let { "%.2f".format(it) } ?: "null"
        val vdop = p?.vdop?.let { "%.2f".format(it) } ?: "null"
        
        sb.append("HDOP: $hdop | PDOP: $pdop | VDOP: $vdop\n")
        
        val satsUsed = p?.satellitesUsed?.toString() ?: "null"
        val satsVisible = p?.satellitesVisible?.toString() ?: "null"
        
        sb.append("SatÃ©lites usados: $satsUsed | SatÃ©lites visÃ­veis: $satsVisible\n")
        
        val gpsU = p?.gpsUsed?.toString() ?: "0"
        val galileoU = p?.galileoUsed?.toString() ?: "0"
        val glonassU = p?.glonassUsed?.toString() ?: "0"
        val beidouU = p?.beidouUsed?.toString() ?: "0"
        
        sb.append("ConstelaÃ§Ãµes ativas: GPS $gpsU | Galileo $galileoU | GLONASS $glonassU | BeiDou $beidouU ðŸŸ¢\n")
        
        val rollDeg = p?.vehicleTiltRollDeg?.let { "%.2f".format(it) } ?: "null"
        val pitchDeg = p?.vehicleTiltPitchDeg?.let { "%.2f".format(it) } ?: "null"
        val yawDeg = p?.yawDeg?.let { "%.2f".format(it) } ?: "null"
        val yawRate = p?.yawRateDegPerSec?.let { "%.2f".format(it) } ?: "null"
        
        sb.append("InclinaÃ§Ã£o roll: $rollDegÂ° | InclinaÃ§Ã£o pitch: $pitchDegÂ° | Guinada (yaw): $yawDegÂ° | VariaÃ§Ã£o de guinada (yaw rate): $yawRate Â°/s ðŸ”µ estÃ¡vel")
        
        return sb.toString()
    }
    
    private fun buildCard3GnssQuality(state: TelemetryUiState, p: com.example.sensorlogger.model.TelemetryPayloadV11?): String {
        val sb = StringBuilder()
        sb.append("ðŸŸ¦ CARD 3 Â· Qualidade do Sinal GNSS / Doppler / Clock\n")
        sb.append("â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n")
        
        val hdop = p?.hdop ?: Float.MAX_VALUE
        val pdop = p?.pdop ?: Float.MAX_VALUE
        val vdop = p?.vdop ?: Float.MAX_VALUE
        val hdopStr = p?.hdop?.let { "%.2f".format(it) } ?: "null"
        val pdopStr = p?.pdop?.let { "%.2f".format(it) } ?: "null"
        val vdopStr = p?.vdop?.let { "%.2f".format(it) } ?: "null"
        val hdopEmoji = if (hdop < 1.5f) "ðŸŸ¢" else "ðŸŸ¡"
        val pdopEmoji = if (pdop < 2.0f) "ðŸŸ¢" else "ðŸŸ¡"
        val vdopEmoji = if (vdop > 3.0f) "ðŸŸ¡ altitude incerta" else ""
        
        val multiGnss = (if ((p?.gpsUsed ?: 0) > 0) 1 else 0) + 
                        (if ((p?.galileoUsed ?: 0) > 0) 1 else 0) + 
                        (if ((p?.glonassUsed ?: 0) > 0) 1 else 0) + 
                        (if ((p?.beidouUsed ?: 0) > 0) 1 else 0)
        val multiGnssEmoji = if (multiGnss > 1) "ðŸŸ¢" else "ðŸŸ¡"
        
        sb.append("HDOP $hdopStr $hdopEmoji | PDOP $pdopStr $pdopEmoji | VDOP $vdopStr $vdopEmoji | Multi-GNSS: usar >1 constelaÃ§Ã£o? $multiGnssEmoji\n")
        
        sb.append("C/N0 dB-Hz:\n")
        val cn0Min = p?.cn0Min?.let { "%.1f".format(it) } ?: "null"
        val cn0P25 = p?.cn0Percentile25?.let { "%.1f".format(it) } ?: "null"
        val cn0P50 = p?.cn0Median?.let { "%.1f".format(it) } ?: "null"
        val cn0P75 = p?.cn0Percentile75?.let { "%.1f".format(it) } ?: "null"
        val cn0Max = p?.cn0Max?.let { "%.1f".format(it) } ?: "null"
        val cn0Avg = p?.cn0Average?.let { "%.1f".format(it) } ?: "null"
        val cn0Sigma = p?.gnssRaw?.cn0Sigma?.let { "%.2f".format(it) } ?: "null"
        
        sb.append("  mÃ­n $cn0Min | p25 $cn0P25 | p50 $cn0P50 | p75 $cn0P75 | mÃ¡x $cn0Max | mÃ©dia $cn0Avg | Ïƒ $cn0Sigma\n")
        
        sb.append("Doppler:\n")
        val dopplerSats = p?.gnssRaw?.dopplerSatCount?.toString() ?: "null"
        val dopplerSpeed = p?.gnssRaw?.dopplerSpeedMps?.let { "%.2f".format(it) } ?: "null"
        val dopplerSigma = p?.gnssRaw?.dopplerSpeedSigma?.let { "%.3f".format(it) } ?: "null"
        sb.append("  sats $dopplerSats | vel_doppler $dopplerSpeed m/s | sigma $dopplerSigma ðŸŸ¡ baixa confianÃ§a se sigma alto\n")
        
        sb.append("Tempo:\n")
        val satUpdateAge = p?.gnssRaw?.satUpdateAgeMs?.toString() ?: "null"
        val ttff = p?.gnssRaw?.timeToFirstFixMs?.let { "%.0f".format(it) } ?: "null"
        sb.append("  Ãºltima atualizaÃ§Ã£o sat: $satUpdateAge ms | ttff (time to first fix): $ttff ms\n")
        
        sb.append("Clock:\n")
        val clockBias = p?.gnssRaw?.clockBiasNanos?.toString() ?: "null"
        val clockDrift = p?.gnssRaw?.clockDriftNanosPerSecond?.let { "%.2f".format(it) } ?: "null"
        sb.append("  bias $clockBias ns | drift $clockDrift ns/s\n")
        
        val bearingAcc = p?.bearingAccuracyDeg?.let { "%.2f".format(it) } ?: "null"
        sb.append("PrecisÃ£o bearing: $bearingAcc deg\n")
        
        sb.append("Resumo:\n")
        sb.append("  ðŸŸ¢ Fix bom / posiÃ§Ã£o confiÃ¡vel\n")
        sb.append("  ðŸŸ¡ Altitude incerta se VDOP>3\n")
        sb.append("  ðŸŸ¡ CN0 mÃ©dio se mÃ©dia<30\n")
        sb.append("  ðŸŸ¡ Doppler baixa confianÃ§a se sigma alto")
        
        return sb.toString()
    }
    
    private fun buildCard4VehicleDynamics(state: TelemetryUiState, p: com.example.sensorlogger.model.TelemetryPayloadV11?): String {
        val sb = StringBuilder()
        sb.append("ðŸŸ¨ CARD 4 Â· DinÃ¢mica do VeÃ­culo\n")
        sb.append("â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n")
        
        val roll = p?.vehicleTiltRollDeg ?: 0f
        val rollStr = p?.vehicleTiltRollDeg?.let { "%.2f".format(it) } ?: "null"
        val pitchStr = p?.vehicleTiltPitchDeg?.let { "%.2f".format(it) } ?: "null"
        val rollEmoji = if (abs(roll) < 5f) "ðŸŸ¢ nivelado" else ""
        
        sb.append("InclinaÃ§Ã£o lateral (roll): $rollStrÂ° | InclinaÃ§Ã£o frontal (pitch): $pitchStrÂ° $rollEmoji\n")
        
        val yawStr = p?.yawDeg?.let { "%.2f".format(it) } ?: "null"
        sb.append("Guinada (yaw): $yawStrÂ°\n")
        
        val accLong = p?.accLongitudinalMps2?.let { "%.3f".format(it) } ?: "null"
        val accLat = p?.accLateralMps2?.let { "%.3f".format(it) } ?: "null"
        val accVert = p?.accVerticalMps2?.let { "%.3f".format(it) } ?: "null"
        
        sb.append("AceleraÃ§Ã£o longitudinal: $accLong m/sÂ² | Lateral: $accLat m/sÂ² | Vertical: $accVert m/sÂ²\n")
        
        val jerkRms = p?.jerkNormRms?.let { "%.3f".format(it) } ?: "null"
        val jerkSigma = p?.jerkNormSigma?.let { "%.3f".format(it) } ?: "null"
        
        sb.append("Jerk RMS (derivada da aceleraÃ§Ã£o): $jerkRms m/sÂ³ | Desvio Jerk Ïƒ: $jerkSigma m/sÂ³\n")
        
        val shockLevel = p?.motionShockLevel ?: "null"
        val shockScore = p?.motionShockScore?.let { "%.2f".format(it) } ?: "null"
        
        sb.append("NÃ­vel de choque: $shockLevel ðŸŸ¡ | PontuaÃ§Ã£o de choque: $shockScore\n")
        
        val stationary = p?.motionStationary ?: false
        val motionState = if (stationary) "parado" else "em movimento / vibraÃ§Ã£o"
        
        sb.append("Estado de movimento: $motionState")
        
        return sb.toString()
    }
    
    private fun buildCard5ImuHealth(state: TelemetryUiState, p: com.example.sensorlogger.model.TelemetryPayloadV11?): String {
        val sb = StringBuilder()
        sb.append("ðŸŸ« CARD 5 Â· SaÃºde do IMU / Amostragem\n")
        sb.append("â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n")
        
        val fps = p?.imuFpsEffective ?: 0f
        val fpsStr = p?.imuFpsEffective?.let { "%.1f".format(it) } ?: "null"
        val fpsEmoji = if (fps > 100f) "ðŸŸ£ alta" else ""
        val samples = p?.imuSamples?.toString() ?: "null"
        
        sb.append("Taxa efetiva: $fpsStr Hz $fpsEmoji | Amostras: $samples\n")
        
        val accAcc = p?.accelerometerAccuracy ?: "null"
        val gyroAcc = p?.gyroscopeAccuracy ?: "null"
        val rotAcc = p?.rotationAccuracy ?: "null"
        
        sb.append("AcurÃ¡cia aceleraÃ§Ã£o: $accAcc ðŸŸ¢ | AcurÃ¡cia giroscÃ³pio: $gyroAcc ðŸŸ¢ | AcurÃ¡cia rotaÃ§Ã£o: $rotAcc ðŸŸ¢\n")
        
        val yawRate = p?.yawRateDegPerSec?.let { "%.2f".format(it) } ?: "null"
        sb.append("Yaw rate: $yawRate Â°/s ðŸ”µ estÃ¡vel se ~0\n")
        
        val shockLevel = p?.motionShockLevel ?: "null"
        sb.append("NÃ­vel de choque atual: $shockLevel ðŸŸ¡\n")
        
        sb.append("ConclusÃ£o geral: IMU estÃ¡vel, sensores de alta qualidade.")
        
        return sb.toString()
    }
    
    private fun buildCard6AccelerationRaw(state: TelemetryUiState, p: com.example.sensorlogger.model.TelemetryPayloadV11?): String {
        val sb = StringBuilder()
        sb.append("ðŸŸ§ CARD 6 Â· AceleraÃ§Ã£o Bruta (com gravidade)\n")
        sb.append("â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n")
        
        sb.append("AceleraÃ§Ã£o X: mean ${fmt(p?.accXMean)} m/sÂ² | RMS ${fmt(p?.accXRms)} | max ${fmt(p?.accXMax)} | min ${fmt(p?.accXMin)} | Ïƒ ${fmt(p?.accXSigma)}\n")
        sb.append("AceleraÃ§Ã£o Y: mean ${fmt(p?.accYMean)} m/sÂ² | RMS ${fmt(p?.accYRms)} | max ${fmt(p?.accYMax)} | min ${fmt(p?.accYMin)} | Ïƒ ${fmt(p?.accYSigma)}\n")
        sb.append("AceleraÃ§Ã£o Z: mean ${fmt(p?.accZMean)} m/sÂ² | RMS ${fmt(p?.accZRms)} | max ${fmt(p?.accZMax)} | min ${fmt(p?.accZMin)} | Ïƒ ${fmt(p?.accZSigma)}\n")
        
        val normRms = p?.accNormRms ?: 0f
        val normEmoji = if (normRms in 9.81f..9.90f) "ðŸŸ¢" else ""
        sb.append("Norma |acc|: RMS ${fmt(p?.accNormRms)} m/sÂ² | Ïƒ ${fmt(p?.accNormSigma)} â†’ ideal â‰ˆ9.81â€“9.90 m/sÂ² parado $normEmoji")
        
        return sb.toString()
    }
    
    private fun buildCard7AccelerationLinear(state: TelemetryUiState, p: com.example.sensorlogger.model.TelemetryPayloadV11?): String {
        val sb = StringBuilder()
        sb.append("ðŸŸ© CARD 7 Â· AceleraÃ§Ã£o Linear (sem gravidade)\n")
        sb.append("â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n")
        
        sb.append("Linear X: mean ${fmt(p?.linearAccXMean)} m/sÂ² | RMS ${fmt(p?.linearAccXRms)} | max ${fmt(p?.linearAccXMax)} | min ${fmt(p?.linearAccXMin)} | Ïƒ ${fmt(p?.linearAccXSigma)}\n")
        sb.append("Linear Y: mean ${fmt(p?.linearAccYMean)} m/sÂ² | RMS ${fmt(p?.linearAccYRms)} | max ${fmt(p?.linearAccYMax)} | min ${fmt(p?.linearAccYMin)} | Ïƒ ${fmt(p?.linearAccYSigma)}\n")
        sb.append("Linear Z: mean ${fmt(p?.linearAccZMean)} m/sÂ² | RMS ${fmt(p?.linearAccZRms)} | max ${fmt(p?.linearAccZMax)} | min ${fmt(p?.linearAccZMin)} | Ïƒ ${fmt(p?.linearAccZSigma)}\n")
        
        val normRms = p?.linearAccNormRms ?: 0f
        val normEmoji = if (normRms < 0.5f) "ðŸŸ¢" else ""
        sb.append("Norma |linear_acc|: RMS ${fmt(p?.linearAccNormRms)} m/sÂ² | Ïƒ ${fmt(p?.linearAccNormSigma)} â†’ vibraÃ§Ã£o do veÃ­culo $normEmoji")
        
        return sb.toString()
    }
    
    private fun buildCard8Gyro(state: TelemetryUiState, p: com.example.sensorlogger.model.TelemetryPayloadV11?): String {
        val sb = StringBuilder()
        sb.append("ðŸŸ¦ CARD 8 Â· Giro / Movimento Rotacional\n")
        sb.append("â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n")
        
        sb.append("Giro X: mean ${fmt(p?.gyroXMean)} rad/s | RMS ${fmt(p?.gyroXRms)} | max ${fmt(p?.gyroXMax)} | min ${fmt(p?.gyroXMin)} | Ïƒ ${fmt(p?.gyroXSigma)}\n")
        sb.append("Giro Y: mean ${fmt(p?.gyroYMean)} rad/s | RMS ${fmt(p?.gyroYRms)} | max ${fmt(p?.gyroYMax)} | min ${fmt(p?.gyroYMin)} | Ïƒ ${fmt(p?.gyroYSigma)}\n")
        sb.append("Giro Z: mean ${fmt(p?.gyroZMean)} rad/s | RMS ${fmt(p?.gyroZRms)} | max ${fmt(p?.gyroZMax)} | min ${fmt(p?.gyroZMin)} | Ïƒ ${fmt(p?.gyroZSigma)}\n")
        
        sb.append("Norma |gyro|: RMS ${fmt(p?.gyroNormRms)} rad/s | Ïƒ ${fmt(p?.gyroNormSigma)} â†’ baixa rotaÃ§Ã£o = estÃ¡vel ðŸ”µ")
        
        return sb.toString()
    }
    
    private fun buildCard9Magnetometer(state: TelemetryUiState, p: com.example.sensorlogger.model.TelemetryPayloadV11?): String {
        val sb = StringBuilder()
        sb.append("ðŸŸª CARD 9 Â· Campo MagnÃ©tico e OrientaÃ§Ã£o\n")
        sb.append("â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n")
        
        sb.append("Mag X: mean ${fmt(p?.magnetometerXMean)} ÂµT | RMS ${fmt(p?.magnetometerXRms)} | max ${fmt(p?.magnetometerXMax)} | min ${fmt(p?.magnetometerXMin)} | Ïƒ ${fmt(p?.magnetometerXSigma)}\n")
        sb.append("Mag Y: mean ${fmt(p?.magnetometerYMean)} ÂµT | RMS ${fmt(p?.magnetometerYRms)} | max ${fmt(p?.magnetometerYMax)} | min ${fmt(p?.magnetometerYMin)} | Ïƒ ${fmt(p?.magnetometerYSigma)}\n")
        sb.append("Mag Z: mean ${fmt(p?.magnetometerZMean)} ÂµT | RMS ${fmt(p?.magnetometerZRms)} | max ${fmt(p?.magnetometerZMax)} | min ${fmt(p?.magnetometerZMin)} | Ïƒ ${fmt(p?.magnetometerZSigma)}\n")
        
        val fieldStrength = p?.magnetometerFieldStrength ?: 0f
        val fieldEmoji = if (fieldStrength in 25f..65f) "ðŸŸ¢" else ""
        sb.append("Campo total: ${fmt(p?.magnetometerFieldStrength)} ÂµT $fieldEmoji faixa terrestre normal\n")
        
        sb.append("OrientaÃ§Ã£o: yaw ${fmt(p?.yawDeg)}Â° | pitch ${fmt(p?.pitchDeg)}Â° | roll ${fmt(p?.rollDeg)}Â°")
        
        return sb.toString()
    }
    
    private fun buildCard10Barometer(state: TelemetryUiState, p: com.example.sensorlogger.model.TelemetryPayloadV11?): String {
        val sb = StringBuilder()
        sb.append("ðŸŸ« CARD 10 Â· BarÃ´metro / PressÃ£o AtmosfÃ©rica\n")
        sb.append("â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n")
        
        val pressure = p?.baroPressureHpa?.let { "%.1f".format(it) } ?: "null"
        val altitude = p?.baroAltitudeMeters?.let { "%.1f".format(it) } ?: "null"
        
        sb.append("PressÃ£o baromÃ©trica: $pressure hPa | Altitude baromÃ©trica: $altitude m\n")
        
        val hasData = (p?.baroPressureHpa != null || p?.baroAltitudeMeters != null)
        if (!hasData) {
            sb.append("â†’ se ambos null: \"âšª sem barÃ´metro no hardware\"")
        }
        
        return sb.toString()
    }
    
    private fun buildCard12GnssRaw(state: TelemetryUiState, p: com.example.sensorlogger.model.TelemetryPayloadV11?): String {
        val sb = StringBuilder()
        sb.append("ðŸŸ¦ CARD 12 Â· GNSS Raw â€“ SatÃ©lites e MediÃ§Ãµes AvanÃ§adas\n")
        sb.append("â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n")
        
        val raw = p?.gnssRaw
        
        val tsNanos = raw?.timestampNanos?.toString() ?: "null"
        val clockBias = raw?.clockBiasNanos?.toString() ?: "null"
        val clockDrift = raw?.clockDriftNanosPerSecond?.let { "%.2f".format(it) } ?: "null"
        
        sb.append("Tempo GNSS (timestamp_nanos): $tsNanos | Bias clock: $clockBias ns | Drift: $clockDrift ns/s\n")
        
        val dopplerSats = raw?.dopplerSatCount?.toString() ?: "null"
        sb.append("SatÃ©lites Doppler: $dopplerSats\n")
        
        val dopplerSpeed = raw?.dopplerSpeedMps?.let { "%.2f".format(it) } ?: "null"
        val dopplerSigma = raw?.dopplerSpeedSigma?.let { "%.3f".format(it) } ?: "null"
        sb.append("Velocidade Doppler agregada: $dopplerSpeed m/s | Sigma: $dopplerSigma (quanto menor melhor)\n")
        
        val satUpdateAge = raw?.satUpdateAgeMs?.toString() ?: "null"
        val ttff = raw?.timeToFirstFixMs?.let { "%.0f".format(it) } ?: "null"
        sb.append("Ãšltima atualizaÃ§Ã£o de sat: $satUpdateAge ms | Tempo atÃ© primeiro fix: $ttff ms\n")
        
        val agcAvg = raw?.agcDbAvg?.let { "%.2f".format(it) } ?: "null"
        val cn0Avg = raw?.cn0Avg?.let { "%.2f".format(it) } ?: "null"
        val cn0Sigma = raw?.cn0Sigma?.let { "%.2f".format(it) } ?: "null"
        sb.append("AGC mÃ©dio: $agcAvg dB | CN0 mÃ©dio: $cn0Avg dB-Hz | CN0 Ïƒ: $cn0Sigma\n")
        
        sb.append("Listar TODAS as mediÃ§Ãµes individuais atuais (nÃ£o limitar a 10):\n")
        
        if (raw?.measurements?.isNotEmpty() == true) {
            raw.measurements.forEach { m ->
                val svid = m.svid
                val const = getConstellationName(m.constellationType)
                val cn0 = m.cn0DbHz?.let { "%.1f".format(it) } ?: "N/A"
                val freq = m.carrierFrequencyHz?.let { "%.3f".format(it / 1e6) } ?: "N/A"
                val doppler = m.pseudorangeRateMetersPerSecond?.let { "%.2f".format(it) } ?: "N/A"
                val agc = m.agcDb?.let { "%.2f".format(it) } ?: "N/A"
                
                sb.append("  $svid ($const) â†’ CN0 $cn0 dB-Hz | Freq $freq MHz | Doppler $doppler m/s | AGC $agc dB\n")
            }
        } else {
            sb.append("  (nenhuma mediÃ§Ã£o raw disponÃ­vel)\n")
        }
        
        return sb.toString()
    }
    
    private fun buildCard11NetworkUpload(state: TelemetryUiState, p: com.example.sensorlogger.model.TelemetryPayloadV11?): String {
        val sb = StringBuilder()
        sb.append("ðŸŸ© CARD 11 Â· Network / Upload / ServiÃ§o\n")
        sb.append("â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n")
        
        sb.append("mqttStatus: ${state.mqttStatus} | serviceRunning: ${state.isServiceRunning}\n")
        sb.append("offlineQueueCount: ${state.queueSize} | offlineQueueSizeMB: N/A\n")
        sb.append("brokerEndpoints: ${state.brokerActiveEndpoint ?: "N/A"} (string atual)\n")
        
        sb.append("PermissÃµes:\n")
        sb.append("  background location: ${if (state.permissionsGranted) "OK" else "FALTA"}\n")
        sb.append("  battery optimization: N/A\n")
        sb.append("  notifications: N/A\n")
        
        sb.append("ConclusÃ£o envio:\n")
        val deliveryStatus = if (state.mqttStatus == "Connected" && state.queueSize == 0) {
            "ðŸŸ¢ ENVIANDO EM TEMPO REAL"
        } else {
            "ðŸŸ¡ BUFFER/RETRY"
        }
        sb.append("  Delivery: $deliveryStatus\n")
        sb.append("  Operator sync: ${state.operatorName.ifEmpty { "N/A" }}")
        
        return sb.toString()
    }
    
    private fun getConstellationName(type: Int): String {
        return when (type) {
            1 -> "GPS"
            2 -> "SBAS"
            3 -> "GLONASS"
            4 -> "QZSS"
            5 -> "BEIDOU"
            6 -> "GALILEO"
            else -> "UNKNOWN"
        }
    }
}
